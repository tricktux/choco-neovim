<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>neovim</id>
		<title>Neovim</title>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.8.0</version>
		<packageSourceUrl>https://github.com/tricktux/choco-neovim</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
		<owners>Reinaldo Molina</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
		<authors>Neovim contributors</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://neovim.io/</projectUrl>
		<iconUrl>https://neovim.io/images/logo@2x.png</iconUrl>
		<copyright>Copyright Neovim contributors. All rights reserved.</copyright>
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://raw.githubusercontent.com/neovim/neovim/master/LICENSE.txt</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
		<projectSourceUrl>https://github.com/neovim/neovim</projectSourceUrl>
		<docsUrl>https://neovim.io/doc/general/</docsUrl>
    <wikiUrl>https://github.com/neovim/neovim/wiki/</wikiUrl>
		<mailingListUrl>https://neovim.discourse.group/</mailingListUrl>
		<bugTrackerUrl>https://github.com/neovim/neovim/issues</bugTrackerUrl>
		<tags>vi vim gvim neovim text editor sublime atom emacs notepad</tags>
		<summary>Vim-fork focused on extensibility and usability.</summary>
		<description>
### More powerful plugins
- The msgpack API enables structured communication to and from any programming language.
- Remote plugins run as co-processes that communicate with Neovim safely and asynchronously.

### Better out-of-the-box
- Strong defaults
- Modern terminal features such as truecolor and bracketed paste
- Built-in terminal emulator
- First-class embedding
- GUIs (or TUIs—such as readline) can nvim --embed or communicate via TCP socket using the discoverable msgpack API.

### Drop-in replacement for Vim
- Neovim is an extension of Vim: feature-parity and backwards compatibility are high priorities.
- If you are already familiar with Vim, see :help nvim-from-vim to learn about the differences.

### Following HEAD
- If you want to stay up to date with the latest development you can install neovim using the `--pre` option.
- For example: `choco install neovim --pre`. 
- Which will get you the latest _nightly_ builds for windows.

### Package Parametes
- `/NoNeovimOnPath`: Neovim binary folder will not be added to the path.
	- Optional parameter.
	- Default behavior is that Neovim binary will be added to the users path.
	- If this is used together with `/NeovimOnPathForAll`, this takes precedence and the path will not be modified.
	- Example: `choco install neovim --params "/NoNeovimOnPath"`
- `/NeovimOnPathForAll`: Neovim binary folder will be added to the machine path.
	- Optional parameter.
	- Default behavior is that Neovim binary will be added only to the users path.
	- Example: `choco install neovim --params "/NeovimOnPathForAll"`

**Note:** ~~To force the installation of x32 version, use the `--x86` argument with `choco install`.~~

As of [#16317](https://github.com/neovim/neovim/pull/16317) Win32 builds and releases were removed

		</description>
		<releaseNotes>
Release notes [here](https://github.com/neovim/neovim/releases/tag/v0.8.0).
		</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
		<dependencies>
			<dependency id="vcredist2015" version="14.0.24215.20170201"/>
		</dependencies>
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension
         - You want to use Get-UninstallRegistryKey on less than 0.9.10 (in chocolateyUninstall.ps1)
         - You want to use Get-PackageParameters and on less than 0.11.0
         - You want to take advantage of other functions in the core community maintainer's team extension package
    -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
